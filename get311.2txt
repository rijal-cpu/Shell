<?php include("setting.php");

define("SABIT",true);
error_reporting(0);
//ini_set("error_reporting", E_ALL);






$main_settings	 = $conn -> query('select * from siteayar')->fetch();
$def  		     = $conn -> query('select * from ayarlar')->fetch();


## Facebook Settings
$fbayar = array(); 
$fbayar['appId']  =  $main_settings['fbappid']; 
$fbayar['secret'] =  $main_settings['fbsecretkey']; 

## Mail

$mailadres 				 = $main_settings['mailadres'];
$mailsifre				 = $main_settings['mailsifre'];
$mailhost 				 = $main_settings['mailhost'];
$mailport				 = $main_settings['mailport'];
$sslmi					 = $main_settings['sslmi'];
 
$dilAyar  = $def['dilgecis'];
$sessionTime = 6490;
$dillerx = $conn -> query("SELECT dilurl,dilismi FROM dil");
$dilList = array();
foreach($dillerx as $row){
		$dilList[$row['dilurl']] = $row['dilismi'];	
}
if(!isset($_SESSION["lang"])){
	$_SESSION["lang"] = 'tr';
}


$set["lang"] = array(	
	"active"	=> $_SESSION["lang"],
	"def"		=> $_SESSION["lang"],
		"list"		=> $dilList
);


$sideMenuler = $conn -> query("SELECT * FROM modul WHERE sidebar = 1 ORDER BY sira ASC");
$footerMenuler = $conn -> query("SELECT * FROM modul WHERE footer = 1 ORDER BY sira ASC");
$veriler 			 	 = $conn -> query('select * from iletisim where id = 1')->fetch();

## Seo
$unx_baslik		 = unserialize($main_settings['baslik']);
$unx_description = unserialize($main_settings['description']);
$unx_keywords    = unserialize($main_settings['keywords']);

$set["seo"] = [
	"t" 	=> $unx_baslik[$set["lang"]['active']],
	"d" 	=> $unx_description[$set["lang"]['active']],
	"k" 	=> $unx_keywords[$set["lang"]['active']]
];
	
## Genel Link 

$set["siteurl"]		= $_SERVER['HTTP_HOST']; if (substr($set["siteurl"],0,7) != "https://"){ $set["siteurl"] = "https://".$set["siteurl"]; }
$set["adminurl"]	= $set["siteurl"]."/admin";
//$set["langurl"]		= $set["siteurl"]."/".$_SESSION["lang"]."";

if($def['dilgecis'] == "ajax"){
	$map   = $set["siteurl"]; 
}else{
	$map   = $set["siteurl"]."/".$_SESSION["lang"]; 
}
	
	

function seoyaz($title, $desc, $kw, $img){
	global $set,$main_settings,$def; 
	$setimg  = $set['siteurl']."/uploads/logo/logo.png";
	?><!DOCTYPE html>
<html lang="<?php echo $set["lang"]["active"]; ?>">
  <head>	
	<meta charset="UTF-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
	<title><?php echo !empty($title) ? stripslashes($title) : $set["seo"]["t"]; ?></title>
	<meta name="description" content="<?php echo !empty($desc) ? stripslashes($desc) : $set["seo"]["d"]; ?>"/>
	<meta name="keywords" content="<?php echo !empty($kw) ? stripslashes($kw) : $set["seo"]["k"]; ?>"/>
	 
	<!-- Twitter Card data -->
	<meta name="twitter:site" content="<?php echo $_SERVER["REQUEST_URI"]; ?>">
	<meta name="twitter:title" content="<?php echo !empty($desc) ? stripslashes($desc) : $set["seo"]["d"]; ?>">
	<meta name="twitter:description" content="<?php echo !empty($desc) ? stripslashes($desc) : $set["seo"]["d"]; ?>">
	<!-- Open Graph data -->
	<meta property="og:title" content="<?php echo !empty($title) ? stripslashes($title) : $set["seo"]["t"]; ?>" />
	<meta property="og:url" content="<?php echo $set['siteurl']."".$_SERVER["REQUEST_URI"]; ?>" />
	<meta property="og:image" content="<?php echo empty($img) ? $setimg : $img; ?>" />
	<meta property="og:description" content="<?php echo !empty($desc) ? stripslashes($desc) : $set["seo"]["d"]; ?>" />
	<base href="<?php echo $set['siteurl']; ?>" />
	<link rel="shortcut icon" href="favicon.ico" />
	 
	<?php 
}

function _footer(){ 
	global $conn,$set; 
	$veriler = $conn -> query('select * from iletisim where id = 1')->fetch();
?>
 
<?php }

function _footer_last(){ 
	global $set,$main_settings;
 ?>
 	 
	
<script src="https://apis.google.com/js/platform.js" async defer>
  { lang: "tr" } </script>
<?php if(!empty($main_settings['googlejs'])){ 
	echo $main_settings['googlejs'];
	}
	?>	
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/tr_TR/sdk.js#xfbml=1&version=v2.8&appId=<?php echo $main_settings['facebookid']; ?>";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));
</script>

	
<?php 	
}
######  Filtre1 ##########
function clean($data) {
    $a1=["'",'"']; $a2=["&#39;","&quot;"];
	$data = htmlspecialchars(trim(stripslashes($data)));
	$data = str_replace( $a1, $a2, $data );
	return $data;
}
function get($data){
	$data = htmlspecialchars($data);
	return $data;
}

##### Seflink ###########
function sef_link($str, $options = array()){

    $str = mb_convert_encoding((string)$str, 'UTF-8', mb_list_encodings());


    $defaults = array(
        'delimiter' => '-',
        'limit' => null,
        'lowercase' => true,
        'transliterate' => true,
    );

    $options = array_merge($defaults, $options);
    $dmr = $defaults["delimiter"];
    $char_map = array(
        // Latin
        'À' => 'A', 'Á' => 'A', ' ' => $dmr, 'Ã' => 'A', 'Ä' => 'A', 'Å' => 'A', 'Æ' => 'AE', 'Ç' => 'C', 
        'È' => 'E', 'É' => 'E', 'Ê' => 'E', 'Ë' => 'E', 'Ì' => 'I', 'Í' => 'I', 'Î' => 'I', 'Ï' => 'I', 
        'Ð' => 'D', 'Ñ' => 'N', 'Ò' => 'O', 'Ó' => 'O', 'Ô' => 'O', 'Õ' => 'O', 'Ö' => 'O', 'Ő' => 'O', 
        'Ø' => 'O', 'Ù' => 'U', 'Ú' => 'U', 'Û' => 'U', 'Ü' => 'U', 'Ű' => 'U', 'Ý' => 'Y', 'Þ' => 'TH', 
        'ß' => 'ss', 
        'à' => 'a', 'á' => 'a', 'â' => 'a', 'ã' => 'a', 'ä' => 'a', 'å' => 'a', 'æ' => 'ae', 'ç' => 'c', 
        'è' => 'e', 'é' => 'e', 'ê' => 'e', 'ë' => 'e', 'ì' => 'i', 'í' => 'i', 'î' => 'i', 'ï' => 'i', 
        'ð' => 'd', 'ñ' => 'n', 'ò' => 'o', 'ó' => 'o', 'ô' => 'o', 'õ' => 'o', 'ö' => 'o', 'ő' => 'o', 
        'ø' => 'o', 'ù' => 'u', 'ú' => 'u', 'û' => 'u', 'ü' => 'u', 'ű' => 'u', 'ý' => 'y', 'þ' => 'th', 
        'ÿ' => 'y',

        // Latin symbols
        '©' => '(c)',

        // Greek
        'Α' => 'A', 'Β' => 'B', 'Γ' => 'G', 'Δ' => 'D', 'Ε' => 'E', 'Ζ' => 'Z', 'Η' => 'H', 'Θ' => '8',
        'Ι' => 'I', 'Κ' => 'K', 'Λ' => 'L', 'Μ' => 'M', 'Ν' => 'N', 'Ξ' => '3', 'Ο' => 'O', 'Π' => 'P',
        'Ρ' => 'R', 'Σ' => 'S', 'Τ' => 'T', 'Υ' => 'Y', 'Φ' => 'F', 'Χ' => 'X', 'Ψ' => 'PS', 'Ω' => 'W',
        'Ά' => 'A', 'Έ' => 'E', 'Ί' => 'I', 'Ό' => 'O', 'Ύ' => 'Y', 'Ή' => 'H', 'Ώ' => 'W', 'Ϊ' => 'I',
        'Ϋ' => 'Y',
        'α' => 'a', 'β' => 'b', 'γ' => 'g', 'δ' => 'd', 'ε' => 'e', 'ζ' => 'z', 'η' => 'h', 'θ' => '8',
        'ι' => 'i', 'κ' => 'k', 'λ' => 'l', 'μ' => 'm', 'ν' => 'n', 'ξ' => '3', 'ο' => 'o', 'π' => 'p',
        'ρ' => 'r', 'σ' => 's', 'τ' => 't', 'υ' => 'y', 'φ' => 'f', 'χ' => 'x', 'ψ' => 'ps', 'ω' => 'w',
        'ά' => 'a', 'έ' => 'e', 'ί' => 'i', 'ό' => 'o', 'ύ' => 'y', 'ή' => 'h', 'ώ' => 'w', 'ς' => 's',
        'ϊ' => 'i', 'ΰ' => 'y', 'ϋ' => 'y', 'ΐ' => 'i',

        // Turkish
        'Ş' => 'S', 'İ' => 'I', 'Ç' => 'C', 'Ü' => 'U', 'Ö' => 'O', 'Ğ' => 'G',
        'ş' => 's', 'ı' => 'i', 'ç' => 'c', 'ü' => 'u', 'ö' => 'o', 'ğ' => 'g', 

        // Russian
        'А' => 'A', 'Б' => 'B', 'В' => 'V', 'Г' => 'G', 'Д' => 'D', 'Е' => 'E', 'Ё' => 'Yo', 'Ж' => 'Zh',
        'З' => 'Z', 'И' => 'I', 'Й' => 'J', 'К' => 'K', 'Л' => 'L', 'М' => 'M', 'Н' => 'N', 'О' => 'O',
        'П' => 'P', 'Р' => 'R', 'С' => 'S', 'Т' => 'T', 'У' => 'U', 'Ф' => 'F', 'Х' => 'H', 'Ц' => 'C',
        'Ч' => 'Ch', 'Ш' => 'Sh', 'Щ' => 'Sh', 'Ъ' => '', 'Ы' => 'Y', 'Ь' => '', 'Э' => 'E', 'Ю' => 'Yu',
        'Я' => 'Ya',
        'а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'д' => 'd', 'е' => 'e', 'ё' => 'yo', 'ж' => 'zh',
        'з' => 'z', 'и' => 'i', 'й' => 'j', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o',
        'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'h', 'ц' => 'c',
        'ч' => 'ch', 'ш' => 'sh', 'щ' => 'sh', 'ъ' => '', 'ы' => 'y', 'ь' => '', 'э' => 'e', 'ю' => 'yu',
        'я' => 'ya',

        // Ukrainian
        'Є' => 'Ye', 'І' => 'I', 'Ї' => 'Yi', 'Ґ' => 'G',
        'є' => 'ye', 'і' => 'i', 'ї' => 'yi', 'ґ' => 'g',

        // Czech
        'Č' => 'C', 'Ď' => 'D', 'Ě' => 'E', 'Ň' => 'N', 'Ř' => 'R', 'Š' => 'S', 'Ť' => 'T', 'Ů' => 'U', 
        'Ž' => 'Z', 
        'č' => 'c', 'ď' => 'd', 'ě' => 'e', 'ň' => 'n', 'ř' => 'r', 'š' => 's', 'ť' => 't', 'ů' => 'u',
        'ž' => 'z', 

        // Polish
        'Ą' => 'A', 'Ć' => 'C', 'Ę' => 'e', 'Ł' => 'L', 'Ń' => 'N', 'Ó' => 'o', 'Ś' => 'S', 'Ź' => 'Z', 
        'Ż' => 'Z', 
        'ą' => 'a', 'ć' => 'c', 'ę' => 'e', 'ł' => 'l', 'ń' => 'n', 'ó' => 'o', 'ś' => 's', 'ź' => 'z',
        'ż' => 'z',

        // Latvian
        'Ā' => 'A', 'Č' => 'C', 'Ē' => 'E', 'Ģ' => 'G', 'Ī' => 'i', 'Ķ' => 'k', 'Ļ' => 'L', 'Ņ' => 'N', 
        'Š' => 'S', 'Ū' => 'u', 'Ž' => 'Z',
        'ā' => 'a', 'č' => 'c', 'ē' => 'e', 'ģ' => 'g', 'ī' => 'i', 'ķ' => 'k', 'ļ' => 'l', 'ņ' => 'n',
        'š' => 's', 'ū' => 'u', 'ž' => 'z'
    );


    if ($options['transliterate']) {
        $str = str_replace(array_keys($char_map), $char_map, $str);
    }
    $str = preg_replace('/[^\p{L}\p{Nd}]+/u', $options['delimiter'], $str);
    $str = preg_replace('/(' . preg_quote($options['delimiter'], '/') . '){2,}/', '$1', $str);
    $str = mb_substr($str, 0, ($options['limit'] ? $options['limit'] : mb_strlen($str, 'UTF-8')), 'UTF-8');
    $str = trim($str, $options['delimiter']);
    return $options['lowercase'] ? mb_strtolower($str, 'UTF-8') : $str;
}

## Büyük Harf ##
function strtouppertr($str){
	global $set;
	if($set['lang']['active'] =="tr"){
		return mb_convert_case(str_replace('i','İ',$str), MB_CASE_UPPER, 'UTF-8');	
	}else{
		return mb_convert_case($str, MB_CASE_UPPER, 'UTF-8');	
	}
}
## Küçük Harf ##
 function strtolowertr($str)
{
 return mb_convert_case(str_replace('i','İ',$str), MB_CASE_LOWER, 'UTF-8');
}

function zr_fix($zr){
 return str_replace("&nbsp;","66",$zr);
}

 ## İlk Harf Harf ## 
function ucfirsttr($str)
{
  $bul = array("i","İ","I");
  $change = array("i","İ","ı");
 return mb_convert_case(str_replace($bul,$change,$str), MB_CASE_TITLE, 'UTF-8');
}


## Id Kontrol ##
function isValidMongoid($id){
 if( intval($id) < 1 ){ return false; }
 return true;
}
### Bildirim Mesajları ###

function eklendi($baslik, $mesaj='İçerik Başarılı Bir Şekilde Oluşturuldu'){ 
	if( empty($baslik) ){ $baslik = 'İşlem Tamamlandı'; }
	$data = '<div class="col-md-12">
			<div class="alert alert-success" role="alert">
			  <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
			  <strong>'.$baslik.' !</strong> '.$mesaj.'.
			</div>
		</div>';
		echo $data;
}

function hata($baslik,$mesaj="Veritabanına Ekleme Sırasında Bir Oluştu"){
	if( empty($baslik) ){ $baslik = 'Bir Sorun Oluştu'; }
	$data = '<div class="col-md-12">
			<div class="alert alert-danger" role="alert">
			  <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
			  <strong>'.$baslik.' !</strong> '.$mesaj.'
			</div>
		</div>';
    echo $data;		
}

## Boyut Al ##

function sizeType($size, $sizes = array('Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB')){
	return (round($size/pow(1024, ($i = floor(log($size, 1024)))), 2) . ' ' . $sizes[$i]);
}

function boyutHesapla($dizin){
	$toplamBoyut = 0;
	if(!$ac = opendir($dizin)) return false;
	while($dosya = readdir($ac)){
		if($dosya == "." || $dosya == "..") continue;
		if(is_file($dizin."/".$dosya)) $toplamBoyut += filesize($dizin."/".$dosya);
		if(is_dir($dizin."/".$dosya)) $toplamBoyut += boyutHesapla($dizin."/".$dosya);
	}
	closedir($ac);
	return $toplamBoyut;
}

## Klasor Sil ##

function rrmdir($dir) {
    if (is_dir($dir)) {
        $objects = scandir($dir);
        foreach ($objects as $object) {
            if ($object != "." && $object != "..") {
                if (filetype($dir."/".$object) == "dir") rrmdir($dir."/".$object); else @unlink($dir."/".$object);
            }
        }
        reset($objects);
        rmdir($dir);
    }
}
## Tarih 1##
function tarih3($zaman,$dil){
   
   if($dil == "tr"){
	  $saniyeonce = 'saniye önce';
	  $dakikaonce = 'dakika önce';
	  $saatonce   = 'saat önce';
	  $gunonce    = 'gun önce';	 	  
	  $haftaonce  = 'hafta önce';	 	 
	  $ayonce  	  = 'ay önce';	  
	  $yilonce    = 'yil önce';	  
   }else if($dil == "en"){
	  $saniyeonce = 'seconds ago';
	  $dakikaonce = 'minute ago';
	  $saatonce   = 'hours ago';	
	  $gunonce    = 'day ago';	
	  $haftaonce  = 'week ago';	 	  
	  $ayonce  	  = 'mounth ago';	
	  $yilonce    = 'year ago';	  
   }else if($dil == 'de'){
	  $saniyeonce = 'vor sekunden';
	  $dakikaonce = 'vor minuten';
	  $saatonce   = 'vor stunden';
	  $gunonce    = 'vor tagen';	
	  $haftaonce  = 'vor woche';
	  $ayonce  	  = 'vor monat';	
	  $yilonce    = 'jahre';	  	  
   }else{
     $saniyeonce = 'saniye önce';
	 $dakikaonce = 'dakika önce';
	 $saatonce   = 'saat önce';
	 $gunonce    = 'gun önce';	 
     $haftaonce  = 'hafta önce';
	 $ayonce  	 = 'ay önce';	  
     $yilonce    = 'yil önce';	  
   }
   $zaman =  strtotime($zaman);
   $zaman_farki = time() - $zaman;
   $saniye = $zaman_farki;
   $dakika = round($zaman_farki/60);
   $saat = round($zaman_farki/3600);
   $gun = round($zaman_farki/86400);
   $hafta = round($zaman_farki/604800);
   $ay = round($zaman_farki/2419200);
   $yil = round($zaman_farki/29030400);
   if( $saniye < 60 ){
      if ($saniye == 0){
         return "az önce";
      } else {
         return $saniye .' '.$saniyeonce;
      }
   } else if ( $dakika < 60 ){
      return $dakika .' '.$dakikaonce;
   } else if ( $saat < 24 ){
      return $saat.' '.$saatonce;
   } else if ( $gun < 7 ){
      return $gun .' '.$gunonce;
   } else if ( $hafta < 4 ){
      return $hafta.' '.$haftaonce;
   } else if ( $ay < 12 ){
      return $ay .' '.$ayonce;
   } else {
      return $yil.' '.$yilonce;
   }
}


function array_remove_empty($arr){
    $narr = array();
    while(list($key, $val) = each($arr)){
        if (is_array($val)){
            $val = array_remove_empty($val);
            if (count($val)!=0){
                $narr[$key] = $val;
            }
        }
        else {
            if (trim($val) != ""){
                $narr[$key] = $val;
            }
        }
    }
    unset($arr);
    return $narr;
}

function tarih($tarih,$dil,$yazdir = true) {
    date_default_timezone_set('Europe/Istanbul');
	 $explode2 = explode("/", $tarih);
	  
	 if($dil == "tr"){ 
	  if ($explode2[1] == "1") $ay = "Ocak";
      elseif ($explode2[1] == "2") $ay = "Şubat";
      elseif ($explode2[1] == "3") $ay = "Mart";
      elseif ($explode2[1] == "4") $ay = "Nisan";
      elseif ($explode2[1] == "5") $ay = "Mayıs";
      elseif ($explode2[1] == "6") $ay = "Haziran";
      elseif ($explode2[1] == "7") $ay = "Temmuz";
      elseif ($explode2[1] == "8") $ay = "Ağustos";
      elseif ($explode2[1] == "9") $ay = "Eylül";
      elseif ($explode2[1] == "10") $ay = "Ekim";
      elseif ($explode2[1] == "11") $ay = "Kasım";
      elseif ($explode2[1] == "12") $ay = "Aralık";
      
      return $explode2[0]." ".$ay." ".$explode2[2].""; 	
	 }else{
		 return $tarih;
	 }
}
function tarihParcala($tarih,$dil,$yazdir = true) {
    date_default_timezone_set('Europe/Istanbul');
	 $explode2 = explode("-", $tarih);
	  
	 if($dil == "tr"){ 
	  if ($explode2[1] == "1") $ay = "Ocak";
      elseif ($explode2[1] == "2") $ay = "Şubat";
      elseif ($explode2[1] == "3") $ay = "Mart";
      elseif ($explode2[1] == "4") $ay = "Nisan";
      elseif ($explode2[1] == "5") $ay = "Mayıs";
      elseif ($explode2[1] == "6") $ay = "Haziran";
      elseif ($explode2[1] == "7") $ay = "Temmuz";
      elseif ($explode2[1] == "8") $ay = "Ağustos";
      elseif ($explode2[1] == "9") $ay = "Eylül";
      elseif ($explode2[1] == "10") $ay = "Ekim";
      elseif ($explode2[1] == "11") $ay = "Kasım";
      elseif ($explode2[1] == "12") $ay = "Aralık";
      
      echo "<span class='gun'>".$explode2[1]."</span><span>".$ay."</span>"; 	
	 }else{
		echo "<span>".$tarih."</span>"; 	
	 }
}


function GetIP(){
	if (!empty($_SERVER['HTTP_CLIENT_IP']))  
    {  
        $ip=$_SERVER['HTTP_CLIENT_IP'];  
    }  
    elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) 
     
    {  
        $ip=$_SERVER['HTTP_X_FORWARDED_FOR'];  
    }  
    else  
    {  
        $ip=$_SERVER['REMOTE_ADDR'];  
    }  
    return $ip;  
}

### Sef Linkler Ayarı ###
### Sef Linkler Ayarı ###
$sef_kurumsal 			= $conn -> query("select * from modul where sabit = 'kurumsal'")->fetch();
$sef_kurumsal_link      =  unserialize($sef_kurumsal['sef']);
$detaysef_kurumsal_link =  unserialize($sef_kurumsal['detaysef']);
$sef_kurumsal_baslik    =  unserialize($sef_kurumsal['baslik']);

$sef_haberler 			= $conn -> query("select * from modul where sabit = 'haberler'")->fetch();
$detaysef_haber_link    =  unserialize($sef_haberler['detaysef']);
$sef_haber_link         =  unserialize($sef_haberler['sef']);
$sef_haber_baslik       =  unserialize($sef_haberler['baslik']);


$sef_yeniuyeler 			= $conn -> query("select * from modul where sabit = 'yeniuye'")->fetch();
$detaysef_yeniuye_link    =  unserialize($sef_yeniuyeler['detaysef']);
$sef_yeniuye_link         =  unserialize($sef_yeniuyeler['sef']);
$sef_yeniuye_baslik       =  unserialize($sef_yeniuyeler['baslik']);

$sef_ihracatciuyeler 			= $conn -> query("select * from modul where sabit = 'ihracatciuye'")->fetch();
$detaysef_ihracatciuye_link    =  unserialize($sef_ihracatciuyeler['detaysef']);
$sef_ihracatciuye_link         =  unserialize($sef_ihracatciuyeler['sef']);
$sef_ihracatciuye_baslik       =  unserialize($sef_ihracatciuyeler['baslik']);

$sef_basarihikayeler 			= $conn -> query("select * from modul where sabit = 'basarihikaye'")->fetch();
$detaysef_basarihikaye_link    =  unserialize($sef_basarihikayeler['detaysef']);
$sef_basarihikaye_link         =  unserialize($sef_basarihikayeler['sef']);
$sef_basarihikaye_baslik       =  unserialize($sef_basarihikayeler['baslik']);


$sef_insankaynaklari 	= $conn -> query("select * from modul where sabit = 'insankaynaklari'")->fetch();
$sef_insan_link         =  unserialize($sef_insankaynaklari['sef']);
$sef_insan_baslik       =  unserialize($sef_insankaynaklari['baslik']);
$sef_projeler 			= $conn -> query("select * from modul where sabit = 'projeler'")->fetch();
$detaysef_projeler_link =  unserialize($sef_projeler['detaysef']);
$sef_projeler_link      =  unserialize($sef_projeler['sef']);
$sef_projeler_baslik    =  unserialize($sef_projeler['baslik']);
$sef_urunler 			= $conn -> query("select * from modul where sabit = 'urunler'")->fetch();
$detaysef_urunler_link  =  unserialize($sef_urunler['detaysef']);
$sef_urunler_link       =  unserialize($sef_urunler['sef']);
$sef_urunler_baslik     =  unserialize($sef_urunler['baslik']);
$sef_iletisim 			= $conn -> query("select * from modul where sabit = 'iletisim'")->fetch();
$sef_iletisim_link      =  unserialize($sef_iletisim['sef']);
$sef_iletisim_baslik    =  unserialize($sef_iletisim['baslik']);
$sef_galeri   			= $conn -> query("select * from modul where sabit = 'galeri'")->fetch();
$sef_galeri_link        =  unserialize($sef_galeri['sef']);
$sef_galeri_baslik      =  unserialize($sef_galeri['baslik']);
$sef_markalar   		= $conn -> query("select * from modul where sabit = 'markalar'")->fetch();
$sef_markalar_link      =  unserialize($sef_markalar['sef']);
$sef_markalar_baslik    =  unserialize($sef_markalar['baslik']);

$sef_kadromuz   		= $conn -> query("select * from modul where sabit = 'kadromuz'")->fetch();
$sef_kadromuz_link      =  unserialize($sef_kadromuz['sef']);
$sef_kadromuz_baslik    =  unserialize($sef_kadromuz['baslik']);

$sef_genelsekreterlik   		= $conn -> query("select * from modul where sabit = 'genelsekreterlik'")->fetch();
$sef_genelsekreterlik_link      =  unserialize($sef_genelsekreterlik['sef']);
$sef_genelsekreterlik_baslik    =  unserialize($sef_genelsekreterlik['baslik']);

$sef_disiplinkurulu   		= $conn -> query("select * from modul where sabit = 'disiplinkurulu'")->fetch();
$sef_disiplinkurulu_link      =  unserialize($sef_disiplinkurulu['sef']);
$sef_disiplinkurulu_baslik    =  unserialize($sef_disiplinkurulu['baslik']);

$sef_meclis   		= $conn -> query("select * from modul where sabit = 'meclis'")->fetch();
$sef_meclis_link      =  unserialize($sef_meclis['sef']);
$sef_meclis_baslik    =  unserialize($sef_meclis['baslik']);

$sef_yonetimkurulu   		= $conn -> query("select * from modul where sabit = 'yonetimkurulu'")->fetch();
$sef_yonetimkurulu_link      =  unserialize($sef_yonetimkurulu['sef']);
$sef_yonetimkurulu_baslik    =  unserialize($sef_yonetimkurulu['baslik']);

$sef_kadingirimci   		= $conn -> query("select * from modul where sabit = 'kadingirimci'")->fetch();
$sef_kadingirimci_link      =  unserialize($sef_kadingirimci['sef']);
$sef_kadingirimci_baslik    =  unserialize($sef_kadingirimci['baslik']);

$sef_gencgirisimci   		= $conn -> query("select * from modul where sabit = 'gencgirisimci'")->fetch();
$sef_gencgirisimci_link      =  unserialize($sef_gencgirisimci['sef']);
$sef_gencgirisimci_baslik    =  unserialize($sef_gencgirisimci['baslik']);

$sef_sss   				= $conn -> query("select * from modul where sabit = 'sss'")->fetch();
$sef_sss_link     		=  unserialize($sef_sss['sef']);
$sef_sss_baslik   		=  unserialize($sef_sss['baslik']);
$sef_blog  				= $conn -> query("select * from modul where sabit = 'blog'")->fetch();
$detaysef_blog_link     =  unserialize($sef_blog['detaysef']);
$sef_blog_link     		=  unserialize($sef_blog['sef']);
$sef_blog_baslik   		=  unserialize($sef_blog['baslik']);
$sef_etkinlikler 		= $conn -> query("select * from modul where sabit = 'etkinlikler'")->fetch();
$detaysef_etkinlikler_link   =  unserialize($sef_etkinlikler['detaysef']);
$sef_etkinlikler_link   =  unserialize($sef_etkinlikler['sef']);
$sef_etkinlikler_baslik =  unserialize($sef_etkinlikler['baslik']);
$sef_duyurular	 		= $conn -> query("select * from modul where sabit = 'duyurular'")->fetch();
$detaysef_duyurular_link    =  unserialize($sef_duyurular['detaysef']);
$sef_duyurular_link     =  unserialize($sef_duyurular['sef']);
$sef_duyurular_baslik   =  unserialize($sef_duyurular['baslik']);
$sef_takvim		 		= $conn -> query("select * from modul where sabit = 'takvim'")->fetch();
$sef_takvim_link        =  unserialize($sef_takvim['sef']);
$sef_takvim_baslik      =  unserialize($sef_takvim['baslik']);

$sef_sertifikalar       = $conn -> query("select * from modul where sabit = 'sertifikalar'")->fetch();
$sef_sertifikalar_link  =  unserialize($sef_sertifikalar['sef']);
$sef_sertifikalar_baslik  =  unserialize($sef_sertifikalar['baslik']);



$sef_faaliyetraporu       = $conn -> query("select * from modul where sabit = 'faaliyetraporu'")->fetch();
$sef_faaliyetraporu_link  =  unserialize($sef_faaliyetraporu['sef']);
$sef_faaliyetraporu_baslik  =  unserialize($sef_faaliyetraporu['baslik']);

$sef_yayinlar       = $conn -> query("select * from modul where sabit = 'yayinlar'")->fetch();
$sef_yayinlar_link  =  unserialize($sef_yayinlar['sef']);
$sef_yayinlar_baslik  =  unserialize($sef_yayinlar['baslik']);

$sef_destek       = $conn -> query("select * from modul where sabit = 'destek'")->fetch();
$sef_destek_link  =  unserialize($sef_destek['sef']);
$sef_destek_baslik  =  unserialize($sef_destek['baslik']);

$sef_bulten       = $conn -> query("select * from modul where sabit = 'bulten'")->fetch();
$sef_bulten_link  =  unserialize($sef_bulten['sef']);
$sef_bulten_baslik  =  unserialize($sef_bulten['baslik']);

$sef_sektorel       = $conn -> query("select * from modul where sabit = 'sektorel'")->fetch();
$sef_sektorel_link  =  unserialize($sef_sektorel['sef']);
$sef_sektorel_baslik  =  unserialize($sef_sektorel['baslik']);

$sef_dispazar       = $conn -> query("select * from modul where sabit = 'dispazar'")->fetch();
$sef_dispazar_link  =  unserialize($sef_dispazar['sef']);
$sef_dispazar_baslik  =  unserialize($sef_dispazar['baslik']);

$sef_istatistik       = $conn -> query("select * from modul where sabit = 'istatistik'")->fetch();
$sef_istatistik_link  =  unserialize($sef_istatistik['sef']);
$sef_istatistik_baslik  =  unserialize($sef_istatistik['baslik']);


$sef_tescil      	= $conn -> query("select * from modul where sabit = 'tescil'")->fetch();
$sef_tescil_link 	=  unserialize($sef_tescil['sef']);
$detaysef_tescil_link    =  unserialize($sef_tescil['detaysef']);
$sef_tescil_baslik  =  unserialize($sef_tescil['baslik']);

$sef_bilgibankasi         = $conn -> query("select * from modul where sabit = 'bilgibankasi'")->fetch();
$sef_bilgibankasi_link 	  =  unserialize($sef_bilgibankasi['sef']);
$detaysef_bilgibankasi_link     =  unserialize($sef_bilgibankasi['detaysef']);
$sef_bilgibankasi_baslik  =  unserialize($sef_bilgibankasi['baslik']);

$sef_komite         = $conn -> query("select * from modul where sabit = 'komite'")->fetch();
$sef_komite_link 	  =  unserialize($sef_komite['sef']);
$detaysef_komite_link     =  unserialize($sef_komite['detaysef']);
$sef_komite_baslik  =  unserialize($sef_komite['baslik']);

$sef_hizmetler      	  = $conn -> query("select * from modul where sabit = 'hizmetler'")->fetch();
$detaysef_hizmetler_link  =  unserialize($sef_hizmetler['detaysef']);
$sef_hizmetler_link       =  unserialize($sef_hizmetler['sef']);
$sef_hizmetler_baslik     =  unserialize($sef_hizmetler['baslik']);
$sef_videolar     		  = $conn -> query("select * from modul where sabit = 'videolar'")->fetch();
$sef_videolar_link       =  unserialize($sef_videolar['sef']);
$sef_videlar_baslik      =  unserialize($sef_videolar['baslik']);
$sef_referanslar     	 = $conn -> query("select * from modul where sabit = 'referanslar'")->fetch();
$sef_referanslar_link    =  unserialize($sef_referanslar['sef']);
$sef_referanslar_baslik  =  unserialize($sef_referanslar['baslik']);
$sef_uyelik     		 = $conn -> query("select * from modul where sabit = 'uyelik'")->fetch();
$sef_uyelik_link  		 =  unserialize($sef_uyelik['sef']);
$sef_uyelik_baslik  	 =  unserialize($sef_uyelik['baslik']);
$sef_hesap     		     = $conn -> query("select * from modul where sabit = 'hesabim'")->fetch();
$sef_hesap_link  		 =  unserialize($sef_hesap['sef']);
$sef_hesap_baslik  	     =  unserialize($sef_hesap['baslik']);
$sef_sifre     		     = $conn -> query("select * from modul where sabit = 'sifremideğistir'")->fetch();
$sef_sifre_link  		 =  unserialize($sef_sifre['sef']);
$sef_sifre_baslik  	     =  unserialize($sef_sifre['baslik']);
$sef_unuttum     		 = $conn -> query("select * from modul where sabit = 'sifremiunuttum'")->fetch();
$sef_unuttum_link  		 =  unserialize($sef_unuttum['sef']);
$sef_unuttum_baslik  	 =  unserialize($sef_unuttum['baslik']);
$sef_sepet     			 = $conn -> query("select * from modul where sabit = 'sepetim'")->fetch();
$sef_sepet_link  		 =  unserialize($sef_sepet['sef']);
$sef_sepet_baslik  	     =  unserialize($sef_sepet['baslik']);
$sef_siparislerim     	 = $conn -> query("select * from modul where sabit = 'siparislerim'")->fetch();
$sef_siparislerim_link   =  unserialize($sef_siparislerim['sef']);
$sef_siparislerim_baslik =  unserialize($sef_siparislerim['baslik']);
$detaysef_siparislerim_link  =  unserialize($sef_siparislerim['detaysef']);
?>
<div style="display:none">
    <p><a href="https://ohaiafrica.org/">Digital Marketing and SEO</a></p>
    <p><a href="https://chg-maesot.com/">SEO and Digital Marketing</a></p>
    <p><a href="https://dev11.com/">Digital Marketing Services With SEO</a></p>
    <p><a href="https://baseframeworks.com/">Professional SEO Company</a></p>
    <p><a href="https://wcoff.org/">Top SEO Services to Website Ranking</a></p>
    <p><a href="https://agent-fix.com/">Digital Growth Agency</a></p>
    <p><a href="https://www.gamimbo.com/">Marketing Strategy</a></p>
    <p><a href="https://school35.kiev.ua/">Digital Marketing and Strategy</a></p>
    <p><a href="https://www.kaymich.com/">Web Development and SEO</a></p>
    <p><a href="https://www.automatskisistemi.rs/">SEO Company and Strategy Marketing</a></p>
    <p><a href="https://www.caroline-cassart.be/">High-Quality SEO Content Marketing</a></p>
    <p><a href="https://www.carnaval-dolhain.be/">Marketing and Advertising</a></p>
    <p><a href="https://www.lekursaal.be/">Online Marketing and Growth</a></p>
    <p><a href="https://ntso.org.tr/">High-Quality SEO Company</a></p>
    <p><a href="https://ntb.org.tr/">Digital Marketing and Services SEO</a></p>
    <p><a href="https://haremcappadocia.com.tr/">Digital Services With SEO</a></p>
</div>
